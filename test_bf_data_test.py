"""Test rapide de l'algorithme Force Brute sur data_test.csv"""
import sys
sys.path.insert(0, 'MOI')

from utils.data_loader import DataLoader
from controllers.brute_force_resolver import BruteForceResolver

# Charger les donn√©es
print("üìÇ Chargement du data_test.csv...")
actions = DataLoader.load_from_csv('data_test.csv')

if not actions:
    print("‚ùå Erreur: Aucune action charg√©e")
    sys.exit(1)

# R√©soudre avec Force Brute
print("\n‚è≥ R√©solution avec Force Brute (O(2^n))...\n")
bf = BruteForceResolver(actions, max_budget=500000)
portfolio = bf.solve()

# Afficher les r√©sultats
stats = bf.get_stats()
print("="*70)
print("‚úÖ R√âSULTAT - FORCE BRUTE")
print("="*70)
print(f"\nM√©thode: {stats['method']}")
print(f"Co√ªt total: {stats['total_cost']:,.0f} F CFA")
print(f"Profit total: {stats['total_profit']:,.0f} F CFA")
print(f"Nombre d'actions: {stats['actions_count']}")
print(f"It√©rations test√©es: {stats['iterations']:,}")
print(f"Temps d'ex√©cution: {stats['execution_time']:.6f} secondes")
print(f"Complexit√©: O(2^n) = 2^{len(actions)} = {stats['iterations']:,} combinaisons")

print("\nüìã Actions s√©lectionn√©es:")
print("-"*70)
print(f"{'Action':<15} {'Co√ªt':<15} {'Profit %':<15} {'Profit':<15}")
print("-"*70)

for action in sorted(portfolio.actions, key=lambda a: a.cost, reverse=True):
    print(f"{action.name:<15} {action.cost:>12,.0f} {action.profit_pct*100:>13.2f}% {action.get_profit():>12,.0f}")

print("-"*70)
print(f"{'TOTAL':<15} {portfolio.get_total_cost():>12,.0f} {portfolio.get_profit_ratio()*100:>13.2f}% {portfolio.get_total_profit():>12,.0f}")
print("="*70)

print(f"\nüí° Note: Test√© {len(actions)} actions = {2**len(actions):,} combinaisons possibles")
