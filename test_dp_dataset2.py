"""Test rapide de l'algorithme Programmation Dynamique sur dataset2"""
import sys
sys.path.insert(0, 'MOI')

from utils.data_loader import DataLoader
from controllers.dynamic_programming_resolver import DynamicProgrammingResolver

# Charger les donn√©es
print("üìÇ Chargement du dataset2...")
actions = DataLoader.load_from_csv('dataset2_Python+P3.csv')

if not actions:
    print("‚ùå Erreur: Aucune action charg√©e")
    sys.exit(1)

# R√©soudre avec DP
print("\n‚ö° R√©solution avec Programmation Dynamique (O(n√óW))...\n")
dp = DynamicProgrammingResolver(actions, max_budget=500000)
portfolio = dp.solve()

# Afficher les r√©sultats
stats = dp.get_stats()
print("="*70)
print("‚úÖ R√âSULTAT - PROGRAMMATION DYNAMIQUE")
print("="*70)
print(f"\nM√©thode: {stats['method']}")
print(f"Co√ªt total: {stats['total_cost']:,.0f} F CFA")
print(f"Profit total: {stats['total_profit']:,.0f} F CFA")
print(f"Nombre d'actions: {stats['actions_count']}")
print(f"Temps d'ex√©cution: {stats['execution_time']:.6f} secondes")
print(f"Complexit√©: O(n √ó W) = O({len(actions)} √ó 500000)")

print("\nüìã Actions s√©lectionn√©es:")
print("-"*70)
print(f"{'Action':<15} {'Co√ªt':<15} {'Profit %':<15} {'Profit':<15}")
print("-"*70)

for action in sorted(portfolio.actions, key=lambda a: a.cost, reverse=True):
    print(f"{action.name:<15} {action.cost:>12,.0f} {action.profit_pct*100:>13.2f}% {action.get_profit():>12,.0f}")

print("-"*70)
print(f"{'TOTAL':<15} {portfolio.get_total_cost():>12,.0f} {portfolio.get_profit_ratio()*100:>13.2f}% {portfolio.get_total_profit():>12,.0f}")
print("="*70)
